{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analysis - Per Capita Victims by Race"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Prepare Workspace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/xlrd/xlsx.py:266: PendingDeprecationWarning: This method will be removed in future versions.  Use 'tree.iter()' or 'list(tree.iter())' instead.\n",
      "  for elem in self.tree.iter() if Element_has_iter else self.tree.getiterator():\n"
     ]
    }
   ],
   "source": [
    "# Import data analysis libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Import data visualization libraries\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Set appearance parameters\n",
    "pd.set_option('display.max_columns', None)\n",
    "%matplotlib inline\n",
    "sns.set(style='whitegrid', font_scale=2,\n",
    "        rc={'axes.facecolor':'white',\n",
    "            'font.family':'sans-serif',\n",
    "            'font.sans-serif':['Avenir']})\n",
    "\n",
    "# Set graph colours\n",
    "dblue = '#2971b1'\n",
    "mblue = '#6bacd0'\n",
    "lblue = '#c2deec'\n",
    "lired = '#f7ccb4'\n",
    "mered = '#e48165'\n",
    "dared = '#ba3132'\n",
    "palette = [dblue, mblue, lblue, lired, mered, dared]\n",
    "\n",
    "# Hide extra warnings\n",
    "import warnings\n",
    "warnings.filterwarnings(action='once')\n",
    "\n",
    "# Read in data\n",
    "other = 'Two or More Races'\n",
    "df_vic = pd.read_csv('Data - Fatal Police Shootings.csv')\n",
    "df_total = pd.read_excel('Data - Population Census.xlsx', sheet_name='Total')\n",
    "df_white = pd.read_excel('Data - Population Census.xlsx', sheet_name='White')\n",
    "df_black = pd.read_excel('Data - Population Census.xlsx', sheet_name='Black')\n",
    "df_asian = pd.read_excel('Data - Population Census.xlsx', sheet_name='Asian')\n",
    "df_aian = pd.read_excel('Data - Population Census.xlsx', sheet_name='AIAN')\n",
    "df_nhpi = pd.read_excel('Data - Population Census.xlsx', sheet_name='NHPI')\n",
    "df_other = pd.read_excel('Data - Population Census.xlsx', sheet_name=other)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Select Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#### FORMAT VICTIM DATA ####\n",
    "# Select data from complete years\n",
    "data = df_vic[df_vic['date'].str[:4] != '2020'][['race']]\n",
    "# Replace blank values with 'Not Reported' and add titles for races\n",
    "data['race'] = data['race'].fillna('Not Reported')\n",
    "races = {'W': 'White', 'B': 'Black', 'H': 'Hispanic',\n",
    "         'A': 'Asian', 'N': 'Native', 'O': 'Other'}\n",
    "data['race'] = data['race'].replace(races)\n",
    "# Create table of average deaths per year by race\n",
    "data = pd.DataFrame(data['race'].value_counts()/5).reset_index()\n",
    "data = data.rename(columns={'index':'race', 'race': 'number'})\n",
    "\n",
    "#### ADD DATA FOR WHITE POPULATION ####\n",
    "# Drop rows where all values are missing\n",
    "df_white = df_white.dropna(how='all')\n",
    "# Make year row the column head\n",
    "years = [int(i) for i in df_white.iloc[3] if str(i)[0].isnumeric()]\n",
    "other = [i for i in df_white.iloc[3] if str(i)[0].isnumeric() == False]\n",
    "df_white.columns = other + years\n",
    "# Get average population between 2015 and 2019\n",
    "annual_pop = 0\n",
    "for i in range(2015, 2020):\n",
    "    annual_pop += df_white[df_white[np.NaN] == '.NOT HISPANIC'][i]\n",
    "annual_pop = annual_pop/5\n",
    "# Add average population to data\n",
    "data['pop'] = np.where(data['race'] == 'White', annual_pop, np.NaN)\n",
    "\n",
    "#### ADD DATA FOR BLACK POPULATION ####\n",
    "# Drop rows where all values are missing\n",
    "df_black = df_black.dropna(how='all')\n",
    "# Make year row the column head\n",
    "years = [int(i) for i in df_black.iloc[3] if str(i)[0].isnumeric()]\n",
    "other = [i for i in df_black.iloc[3] if str(i)[0].isnumeric() == False]\n",
    "df_black.columns = other + years\n",
    "# Get average population between 2015 and 2019\n",
    "annual_pop = 0\n",
    "for i in range(2015, 2020):\n",
    "    annual_pop += df_black[df_black[np.NaN] == 'TOTAL\\nPOPULATION'][i]\n",
    "annual_pop = annual_pop/5\n",
    "# Add average population to data\n",
    "data['pop'] = np.where(data['race'] == 'Black', annual_pop, data['pop'])\n",
    "\n",
    "#### ADD DATA FOR HISPANIC POPULATION ####\n",
    "# Drop rows where all values are missing\n",
    "df_total = df_total.dropna(how='all')\n",
    "# Make year row the column head\n",
    "years = [int(i) for i in df_total.iloc[3] if str(i)[0].isnumeric()]\n",
    "other = [i for i in df_total.iloc[3] if str(i)[0].isnumeric() == False]\n",
    "df_total.columns = other + years\n",
    "# Get average population between 2015 and 2019\n",
    "annual_pop = 0\n",
    "for i in range(2015, 2020):\n",
    "    hisp_b = df_black[df_black[np.NaN] == '.HISPANIC'][i]\n",
    "    annual_pop += df_total[df_total[np.NaN] == '.HISPANIC'][i] - hisp_b\n",
    "annual_pop = annual_pop/5\n",
    "# Add average population to data\n",
    "data['pop'] = np.where(data['race'] == 'Hispanic', annual_pop, data['pop'])\n",
    "\n",
    "#### ADD DATA FOR ASIAN POPULATION ####\n",
    "# Drop rows where all values are missing\n",
    "df_asian = df_asian.dropna(how='all')\n",
    "# Make year row the column head\n",
    "years = [int(i) for i in df_asian.iloc[3] if str(i)[0].isnumeric()]\n",
    "other = [i for i in df_asian.iloc[3] if str(i)[0].isnumeric() == False]\n",
    "df_asian.columns = other + years\n",
    "# Get average population between 2015 and 2019\n",
    "annual_pop = 0\n",
    "for i in range(2015, 2020):\n",
    "    annual_pop += df_asian[df_asian[np.NaN] == '.NOT HISPANIC'][i]\n",
    "annual_pop = annual_pop/5\n",
    "# Add average population to data\n",
    "data['pop'] = np.where(data['race'] == 'Asian', annual_pop, data['pop'])\n",
    "\n",
    "#### ADD DATA FOR NATIVE POPULATION ####\n",
    "# Drop rows where all values are missing\n",
    "df_aian = df_aian.dropna(how='all')\n",
    "df_nhpi = df_nhpi.dropna(how='all')\n",
    "# Make year row the column head\n",
    "years = [int(i) for i in df_aian.iloc[3] if str(i)[0].isnumeric()]\n",
    "other = [i for i in df_aian.iloc[3] if str(i)[0].isnumeric() == False]\n",
    "df_aian.columns = other + years\n",
    "df_nhpi.columns = other + years\n",
    "# Get average population between 2015 and 2019\n",
    "annual_pop = 0\n",
    "for i in range(2015, 2020):\n",
    "    annual_pop += df_aian[df_aian[np.NaN] == '.NOT HISPANIC'][i]\n",
    "    annual_pop += df_nhpi[df_nhpi[np.NaN] == '.NOT HISPANIC'][i]\n",
    "annual_pop = annual_pop/5\n",
    "# Add average population to data\n",
    "data['pop'] = np.where(data['race'] == 'Native', annual_pop, data['pop'])\n",
    "\n",
    "#### ADD DATA FOR OTHER POPULATION ####\n",
    "# Drop rows where all values are missing\n",
    "df_other = df_other.dropna(how='all')\n",
    "# Make year row the column head\n",
    "years = [int(i) for i in df_other.iloc[3] if str(i)[0].isnumeric()]\n",
    "other = [i for i in df_other.iloc[3] if str(i)[0].isnumeric() == False]\n",
    "df_other.columns = other + years\n",
    "# Get average population between 2015 and 2019\n",
    "annual_pop = 0\n",
    "for i in range(2015, 2020):\n",
    "    annual_pop += df_other[df_other[np.NaN] == '.NOT HISPANIC'][i]\n",
    "annual_pop = annual_pop/5\n",
    "# Add average population to data\n",
    "data['pop'] = np.where(data['race'] == 'Other', annual_pop, data['pop'])\n",
    "\n",
    "# Calculate victims per 1M race population\n",
    "data['percap'] = round(data['number']/data['pop'] * 1000000, 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Conduct Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>race</th>\n",
       "      <th>number</th>\n",
       "      <th>pop</th>\n",
       "      <th>percap</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Black</td>\n",
       "      <td>238.8</td>\n",
       "      <td>43336785.2</td>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Native</td>\n",
       "      <td>15.0</td>\n",
       "      <td>2979612.8</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Hispanic</td>\n",
       "      <td>167.6</td>\n",
       "      <td>55695568.2</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>White</td>\n",
       "      <td>456.2</td>\n",
       "      <td>197655169.8</td>\n",
       "      <td>2.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Other</td>\n",
       "      <td>9.0</td>\n",
       "      <td>6920859.0</td>\n",
       "      <td>1.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Asian</td>\n",
       "      <td>17.0</td>\n",
       "      <td>18109812.4</td>\n",
       "      <td>0.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Not Reported</td>\n",
       "      <td>82.6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           race  number          pop  percap\n",
       "1         Black   238.8   43336785.2     5.5\n",
       "5        Native    15.0    2979612.8     5.0\n",
       "2      Hispanic   167.6   55695568.2     3.0\n",
       "0         White   456.2  197655169.8     2.3\n",
       "6         Other     9.0    6920859.0     1.3\n",
       "4         Asian    17.0   18109812.4     0.9\n",
       "3  Not Reported    82.6          NaN     NaN"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sort_values(by='percap', ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Create Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Average Police Shooting Victims per 1M Population')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot data\n",
    "plt.figure(figsize=(18, 10))\n",
    "g_data = data[data['race'] != 'Not Reported']\n",
    "ax = sns.barplot(data=g_data.sort_values(by='percap', ascending=False),\n",
    "                 x='race', y='percap', palette=palette[::-1])\n",
    "\n",
    "# Create title\n",
    "title = 'Per Capita Annual Police Shooting Victims by Race Population, 2015-2019'\n",
    "plt.figtext(.5,.9, title, fontsize=25, ha='center')\n",
    "\n",
    "# Format axes\n",
    "sns.despine(left=True)\n",
    "\n",
    "# Set graph information\n",
    "plt.xlabel('', labelpad=20)\n",
    "plt.ylabel('Average Police Shooting Victims per 1M Population', labelpad=20)\n",
    "\n",
    "# Export graphic\n",
    "#plt.savefig('Per Capita by Race.svg', b_boxinches='tight', transparent=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
